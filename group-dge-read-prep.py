#!/usr/bin/python
#
# Connor Burbridge
# Bioinformatics technician
# Global Institute for Food Security
# connor.burbridge@gifs.ca
#
##########################################################################################
# Setup
# script to help automate the dge-read-prep step on a grouped basis
# looks for a samples_config.tsv file formatted as:
# treatment1	read-file0-R1.fq	read-file0-R2.fq	read-file1-R1.fq...
# treatment2	read-file0-R1.fq	read-file2-R2.fq ...
# and so on
# two other files are also required for the script to run:
# one file that contains the BASE NAME of the control read files mentioned above
# i.e.
# read-file0-
# read-file1-
# and the same type of file for the treatment condition. Please make sure that the names
# of these files match the treatment name in the samples_config.tsv file.
# You should also ensure that you have Trimmomatic, FastQC, Hisat2, StringTie, R and the 
# DESeq2 R library installed and in your current path for things to run smoothly.
#
##########################################################################################
# Genome preparation
# Prior to running analysis you should have the genome indexed. You should also ahve the 
# appropriate gff file for the genome of interest. When you have these, you must update 
# the genome and gff paths in teh dge-read-preparation.sh script to the paths of your 
# files. The genome must me indexed using the program Hisat2.
#
##########################################################################################
# Usage
# To run this script, enter the directory that contains the samples_config.tsv, 
# treatment1.txt and treatment2.txt files and run the command below:
# Command: python group-dge-read-prep.py path-to-reads-dir threads treatment1-count treatment2-count
# path-to-dir: absolute path to the directory that contains all read files
# threads: number of threads to use during analysis
# treatment1-count: number of samples associated with treatment1
# treatment2-count: number of samples associated with treatment2
#
##########################################################################################
# This script performs some checks that prevents re-doing analysis when results files are
# are already present. Should the pipeline fail at any step, please remove the output files
# from the most recent step and run the same command again. The pipeline should pick up 
# at that step.
# Also, should you want to remove ALL directories and files generated by the pipeline,
# run the following command from the directory containing the samples_config.tsv and 
# treatment files.
# command: python group-dge-read-prep.py clean
# This command will PERMANENTLY delete all results generated from any previous analyses.
# Be careful!
# It is also recommended that you re-direct the STDOUT from this pipeline to a log file
# with a simple > log.txt (or >> log.txt to append) at the end of any command.
#
##########################################################################################


from subprocess import call
import fileinput, re, sys, shutil, os

# check for the clean option and manage command-line aruguments
if (sys.argv[1] == "clean"):
		print("Option clean found. Removing generated directories for each treatment.")
else:
	reads_dir = sys.argv[1]
	threads = sys.argv[2]
	sampleCount1 = sys.argv[3]
	sampleCount2 = sys.argv[4]

# IO mangement
treatment_file = open("./samples_config.tsv", "r")
treatment_list = []

# iterate through each treatment supplied in the samples_config.tsv file
for line in treatment_file:
	split_line = line.split()
	treatment = split_line[0]
	treatment_list.append(split_line[0])
	
	if sys.argv[1] == "clean":
		try:
			shutil.rmtree(treatment)
		except OSError as e:
			print("Error: %s - %s." % (e.filename, e.strerror))
	else:
		print("Preparing reads for genotype: " + split_line[0])
		call(["mkdir", split_line[0]])
		call(["./dge-read-preparation.sh", treatment, threads, reads_dir])

treatment_file.close()

if (sys.argv[1] == "clean"):
	try:
		call(["rm", "gtffiles.txt"])
		call(["rm", "gene_count_matrix.csv"])
		call(["rm", "transcript_count_matrix.csv"])
		call(["rm", "-rf", "deseq2-output"])
		call(["rm", "Rplots.pdf"])
	except OSError as e:
		print("Error: %s - %s." % (e.filename, e.strerror))

	sys.exit(0)

gtffiles = []
outfile = open("gtffiles.txt", "w")

for treatment in treatment_list:
	treatment_path = ("./" + treatment + "/stringtie-output/")	
	gtffiles = os.listdir(treatment_path)
	cwd = os.getcwd()
	i = 0
	for gtf in gtffiles:
		i += 1
		outfile.write(treatment + str(i) + "\t" + cwd + "/" + treatment_path + gtf + "\n")

outfile.close()

if "gene_count_matrix.csv" in os.listdir("./"):
	print("Skipping prepDE.py script. Count matrix already present in current directory.")
else:
	call(["./prepDE.py", "-i", "gtffiles.txt"])

try:
	call(["mkdir", "deseq2-output"])
except OSError as e:
	print("Error: %s - %s." % (e.filename, e.strerror))

call(["cd", "deseq2-output"])
call(["/usr/bin/Rscript", "./DESeq2.txt", treatment[0], treatment[1], sampleCount1, sampleCount2, "gene_count_matrix.csv"])
